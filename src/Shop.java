import java.util.ArrayList;
import java.util.List;

public class Shop {
    public static void main(String[] args) {

        // I created a list of laptops
        ArrayList<Laptop> laptops = new ArrayList<>();

        // I went through a for loop and added a laptop each generated by a design pattern through a LaptopFactory class
        for (int i = 0; i <= 100; i++) {
            laptops.add(LaptopFactory.generateLaptop());
        }

        print(laptops);

        printLine();
        // I sorted Laptops by Name
        List<Laptop> sortedByName = laptops.stream()
                .sorted((l1, l2) -> l1.getMark().compareTo(l2.getMark()))
                .toList();

        print(sortedByName);
        printLine();

        // I sorted Laptops by Ram
        Object[] sortedByRam = laptops.stream()
                .sorted((l1, l2) -> Integer.compare(l1.getRam(), l2.getRam()))
                .toArray();

        print(sortedByRam);
        printLine();

        // I sorted Laptops by Touchscreen Property
        List<Laptop> sortedByTouchscreenProperty = laptops.stream()
                .sorted((l1, l2) -> Boolean.compare(l1.isTouchscreen(), l2.isTouchscreen()))
                .toList();

        print(sortedByTouchscreenProperty);
        printLine();

        // I filtred the laptops according to the criteria below
        List<Laptop> dellLaptopsWithADiagonalOfOver12Point9InchesWithAnFullHDFormatDisplay = laptops.stream()
                .filter(l -> l.getMark().equalsIgnoreCase("Dell"))
                .filter(l -> l.getDiagonal() > 12.9)
                .filter(l -> l.getDisplayFormat().equalsIgnoreCase("Full HD"))
                .toList();

        System.out.println("In the shop there are " + dellLaptopsWithADiagonalOfOver12Point9InchesWithAnFullHDFormatDisplay.size()
                + " Dell laptops larger than 12.9 inches and with the Full HD display format");

        print(dellLaptopsWithADiagonalOfOver12Point9InchesWithAnFullHDFormatDisplay);
        printLine();

        // I checked if there is at least one laptop cheaper than 2000 lei in the shop
        boolean thereAreLaptopsUnderThePriceOf2000Lei = laptops.stream()
                        .anyMatch(l -> l.getPrice() < 2000);

        System.out.println("In stock "
                + (thereAreLaptopsUnderThePriceOf2000Lei
                ? "we have "
                : "we do not have ")
                + "at least one laptop with a price lower than 2000 lei");

        printLine();

        // I have stored in an array the prices of all Apple brand laptops
        Object[] appleLaptops = laptops.stream()
                .filter(laptop ->  laptop.getMark().equalsIgnoreCase("samsung"))
                .map(laptop -> laptop.getPrice())
                .toArray();


        for (Object price : appleLaptops) {
            System.out.println(price);
        }

        printLine();

        // I printed the first laptop in the list that is Apple brand

        Object theFirstAppleLaptop = laptops.stream()
                .filter(laptop -> laptop.getMark().equalsIgnoreCase("apple"))
                .findFirst();

        System.out.println(theFirstAppleLaptop.toString());

    }

    // I created a static method that prints a list of laptops
    public static void print(List<Laptop> laptops){
        for (Laptop l : laptops) {
            System.out.println(l);
        }
    }

    // I created a static method that prints an array of objects
    public static void print(Object[] laptops){
        for (Object l : laptops) {
            System.out.println(l);
        }
    }

    // I created a static method that prints a dotted line so that I can delimit the sorting and filtering above
    public static void printLine(){
        System.out.println("-----------------------------------------------------------------------------------------");
    }

}
